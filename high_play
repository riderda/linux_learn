//////////////////////////////////////////////////////////
----------------------------------------------------------
基本的脚本函数
	创建函数
		function name {
			commands
		}
		or
		name(){

		}
	
	使用函数
		name
		//就这样
		//函数创建必须在使用之前
		//个人理解:函数是类似于自己的命令,所以允许使用以前使用命令的方法去调用函数
		//允许重定义,但是会覆盖原来的函数;这跟java的重载不一样
-----------------------------------------------------------
返回值
	默认退出码
		默认情况下,函数的退出码是最后一条命令返回的退出码,所以在函数结束后可以使用 $? 获取

		return
		//如果需要的话,函数结束就立刻获取返回值
		//返回值只能在0-255之间
		//要返回更大值或者字符串就需要其他手段了

	使用函数输出
		result=`函数名`

		eg:
			db1(){
				echo "hello"
			}

			result=$(db1)
		//result = hello
	//通过这种手段可以获取浮点数和字符串
------------------------------------------------------------
在函数中使用变量
	向函数传递参数
	
	addem() {
		if [ $# -eq 0 ] || [ $# -gt 2 ]
		then 
			echo -1
		elif [ $# -eq 1 ]
		then 
			echo $[$1 + $1}
		else
			echo $[$1 + $2]
		fi
	}
	
	//
		我之前的猜想是函数是命令,所以参数的传递和命令的参数传递一样
		$1,$2 .....
		$# , $@ , $* 之类的
		所以不能直接对外部脚本的参数进行操作
		需要手动传参
	//

	在函数中处理变量
	* 全局变量
		在函数外被定义并赋值.如果变量在函数内被赋予了新值,那么在脚本中引用该变量时,新值依然有效.但这个方法往往很蠢

	* 局部变量
		无需在函数中使用的全局变量,函数内部使用的变量都可以声明成局部变量.在变量声明的前面加上 local 关键字
		local关键字保证变量只局限在该函数中,如果脚本中在该函数之外有相同名字的变量,那么shell将会保持这两个变量的值是分离的
---------------------------------------------------------------
数组变量和函数
	向函数传数组参数
		eg:
			testit() {
				echo "参数是: $@"
				thisarray=$1 #尝试将第一个参数作为变量保存,即将数组保存
				echo "这个参数数组是 ${thisarray[*]}"
			}

			myarray=(0 1 2 3 4 5)
			echo "数组是 ${myarray[*]}"
			testit $myarray
		//
			结果
			数组是 0 1 2 3 4 5
			这个参数数组是 0
		//
		//我是不是可以理解为传入的数组会被拆成多个参数,这样$1就只有数组的第一个值

		eg:
			testit() {
				local newarray
				newarray=(`echo "$@"`)#将参数重新拼成一个数组,最外边是数组的标准
				echo "这个参数数组是 ${newarray}"
			}
		//
			结果
			这个参数数组是 0 1 2 3 4 5
		//

