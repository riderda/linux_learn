echo
	-n 不换行
	-e 启用转义
首先shell的大小写敏感

shell的变量默认是字符串

变量的定义：
	shell里面有三种引号。'',"",``.
	单引号：将内容都作为普通字符
	双引号：只解析 $ , \ , ' , "
	反引号：将内容作为shell指令

变量的作用域：
	函数是可以访问到全局的
	声明为局部变量：lcoal
坑点：
	$代表取变量的值，定义和赋值的时候不需要使用。
	建议写成 “${}” 这样的格式。
系统变量：
	$n 解释为参数，文件名为 $0 
	$# 命令行参数的个数
	$? 上一个状态码
	$* 返回所有参数，视为一整个字符串
	$@ 返回所有参数，将每个参数分别用字符串表示
	$$ 返回进程ID
\在shell也是转义

环境变量：
	PATH
	HOME
	COLUMNS
	HISTFILE
	HISTSIZE
	IFS
	LOGNAME
	SHELL
	TERM
	TMOUT
	PWD
还可以用set | more 展示所有环境变量
	set://展示当前环境变量

变量赋值：
	viaoshi_name=value
	注：等号前后不能有空格
清除变量：
	unset variable_name

命令替换://从命令输出中提取信息
反引号：
	`shell_command`
	$(shell_command)
	上述两者等价


条件测试和判断语句：
	test 和 [
	
用法：
	test expression  or [ expression ]
坑点:   [ 作为命令，记住要与表达式有空格

字符串运算符：
	string 判断是否为空
	string1 = string2 判断是否相等
	string1 != string2 判断是否不相等
	-n string 判断是否非空串
	-z string 判断是否空串 注：与第一条看似相同，但两者不一样，建议用这条！
坑点：“=”，“!=”，“-z”等这些符号左右两边一定要有空格

整数运算符：
	test number1 op number2
	-eq =
	-ne !=
	-gt >
	-lt <
	-ge >=
	-le <=

文件测试：
	test op file
	-a 判断存在 注：这玩意和逻辑运算符的&&是一样的
	-e 满足上述的情况而使用，与 “-a” 一样
	-b 块文件
	-c 字符文件
	-d 目录
	-s 非空文件
	-f 存在的常规文件
	-w 可写
	-L 存在的符号链接
	-u 设置suid位
	-r 可读
	-x 可执行

逻辑运算符：
	! 
	-a &&
	-o ||

if语句：
if expression
then
	statement1
	...
fi

或者
if expression; then
	statement
	...
fi

空命令：“:”,不做任何事，退出状态永远是0

类似scanf，shell有 read 用于读取键盘输入
shell是动态语言，类型之间可以发生隐式转换

有if elif 进行多条件判断

退出程序：
	exit status

多条件判断语句：
case variable in
value1)	//右边的圆括号
	statement
	...
	;; //类似break
value2)
	statement
	...
	;;
...
*) //default
	statement
	...
	;;
esac //case倒过来写，代表结束

算术运算符：
	和py的基本相同，有 ** 但没有 //
	`expr expression`
	$((...))
	$[...] 同上
	let 
坑点：
	运算符两边一定要有空格！！！
	expr不能进行幂运算，而且里面的 “()”，“*”，都要转义处理，注意反引号！！！
拥有和C一样的位运算符，复合运算符，自增自减运算符！
常量进制：
	eg：20 ， 020 ， 0x20
	又或者
	eg：x=2#10000 , x=8#123 , x=16#32...类似这种写法

循环结构：
for循环：
	for variable in {list}
	do
		...
	done
或者
	for variable in {start..end..step}
	do
		...
	done
还有很多灵活的用法，比如：for var in $(ls)之类
或者
	for var
	do
		...
	done
	像这种默认列表为参数
或者c风格的for循环语句
	for((i=1;i<10;i++))
	do	
		...
	done
for循环处理数组，等我学完数组再来补充

until循环语句：
	until expression
	do
		...
	done
坑点：上面的条件不是循环条件，而是退出条件
	
while循环语句：
	while expression
	do
		...
	done
还有break和continue控制，基本和C一样，但是后边可以加参数，表示跳出的循环数
eg：break 2 或者 continue 2 

/////////////////////////////////////////////////////////////////////////////////
使用多个命令
	command1;command2
	//中间用分号隔开

////////////////////////////////////////////////////////////////////////////////
重定向
	> 输出重定向
	>> 输出重定向(追加)

	< 输入重定向
	内联输入重定向:
	<< 结束符号
	 //里面随便写
	 结束符号
	 //代表结束,结束符号只能单独占一行

管道
	命令 | 命令
	//经常用于一个命令的输出作为另一个命令的输入

数学运算
	expr:
		arg1 | arg2 如果arg1不是null或零值,返回arg1 ,否则返回arg2
		arg1 & arg2 如果没有参数是null或零值,返回arg1,否则返回0
		+-*/% >< <= >= 这些符号的定义都和常见的的定义一样
		STRING : REGEXP //如果匹配到.就返回该模式
		match STRING REGEXP //和上面一样
		substr STRING POS LENGTH //返回从pos开始,长度为length的子字符串
		index STRING CHARS //返回在string中chars的位置,否则返回0
		length STRING //返回string的长度
		+ TOKEN //将token解析成字符串
		(表达式) 返回表达式的值
		//注意一些符号需要转义
		
	$[ 表达式 ]://好像不需要空格                           //这个和条件判断的[] 不一样好像
	//bash里面没有提供浮点数计算
	
	浮点数解决方案:
	bc:
	在脚本中使用bc:
	var=$(echo "options; expression" | bc)//适合短数据的运算
	
	//使用内联输入重定向
	var=$(bc << EOF
	options
	statements
	expressions
	EOF
	)
	eg:
		var5=$(bc << EOF
		scale=4
		a1 = ($var1*$var2)//a1不能在接下来的shell里面调用到,只能在计算器使用
		a2 = ($var2 * $var4)//计算器里面没有太多关于空格的要求
		EOF
	bc没有幂运算
退出脚本:
	查看退出状态
	$?
		0 
		1  一般未知错误
		2  不适合的命令
		126  命令不可执行
		127  没有找到命令
		128 无效的退出参数
		128+x 与信号x相关的重要错误
		130 ctrl+c终止的命令
		255 正常范围之外的退出状态码
	
	exit://允许自定义退出码
		退出码只能在0~255	
		
//////////////////////////////////////////////////////////////////////////////////
结构化命令
if-then
//注意,如果使用这种command的操作,那只能利用返回码
	格式:
		if command
		then
			command
		fi
		//if接命令,如果命令的返回码是0,则then部分会被执行
		if command ;then
			command 
		fi
		//也可以写成这个样子

if-then-else
	格式:
	if command
	then
		command
	else
		command
	fi

if-elif-then
	if command
	then
		command
	elif command
	then 
		command
	else
		command
	fi
	//在elif语句中,紧跟着的else属于elif,不属于之前的if-then

test命令://用于生成返回码
	格式:test condition
	//注意,test后面没有condition的时候是返回非零值
	
	//test 字符串 //用于判断字符串是否有内容,如果 "" 则返回非零值
	test可以判断的三类条件:
		数值比较:
			-eq =
			-ge >=
			-gt >
			-lt <
			-le <=
			-ne !=
			可惜,只能进行整数的比较

		字符串比较:
			str1 = str2 检查str1是否和str2相同
			str1 != str2
			str1 < str2 //注意大于号要转义,否则会被理解为重定向//而且大小的比较是根据ascii顺序
			str1 > str2
			-n str1 检查str1的长度是否非0
			-z str1 检查str1的长度是否为0//未被定义的字符串长度是0,默认是所有变量都是字符串
			//坑:不要对数值使用字符串比较的符号,否则结果意想不到
		文件比较;
			-d 存在且是目录
			-e 存在
			-f 存在且是文件
			-r 存在且可读
			-s 存在且非空
			-w 存在且可写
			-x 存在且可执行
			-O 存在且属于当前用户
			-G 存在且默认组与当前用户线条
			file1 -nt file2 file1比file2新
			file1 -ot file2 file1比file2老
[ condition ]: //和test一样的功能,但注意要有空格
	复合条件测试:
		[ condition ] && [ condition ]
		[ condition ] || [ condition ]

if-then高级特性
	双括号:
		(( expression )) //主要针对数值,除了test中的数学运算符以外还有以下这些
		//c风格操作
		var++
		var--
		++var
		--var
		!
		~ 位求反
		**
		>>
		<<
		&
		|
		&&
		||
	//不支持浮点数,不仅可以用于判断,还可以用于赋值之类的
	eg:
		if (( $var *82 > 90));then
			(( var2 = $var1 ** 2))//快看,等号终于不用贴在一起了
		fi
	
	方括号:
		[[ expression ]]//不是所有shell都支持,提供了针对字符串的高级特性,使用test的字符串比较,还提供了正则
			//从例子上看,好像是linux的正则,后面有继续说明
----------------------------------------------------------------------------------------

case命令
	格式:
		case var in
		pattern1 | pattern2) command;;//可以使用 | 进行模式选择或
		pattern3) command ;;//记得结尾;;代表break
		*) command;;
		esac

for命令
	格式:
		for var in list
		do
			command
		done
	//也可以 for var in list;do
	//最后迭代的var的值会在脚本里被保留
	//list的每个值默认是空格分割的,如果达不到效果自行添加双引号

	//可以从变量中读取列表
	//可以从命令读取值

更改分隔符
	空格:
	制表符:
	换行符:
	更改分隔符为换行:IFS=$'\n'//忽略空格符和制表符
	//如果需要频繁更改的话,请务必备份该值
	//list有 ' 需要转义

读取目录
	eg:
	for file in /home/chenweida/javascript_learn/*
	do
		command
	done
	//linux的目录或者文件名是允许带空格的,我曹.所以上面的file变量记得用双引号包起来

c风格的for命令
for (( a = 1; a < 10; a++ )) 
	注意,有几个部分不遵循bash的标准
		*变量赋值可以有空格
		*条件中的变量不以$开头
		*迭代过程的算式未用expr
	
	使用多个变量,允许为迭代使用多个变量

while命令
	while test command
	do
		command
	done
	//test command 和 if-then的格式是一样的
	//while允许后面的指令有多个,但只有最后一个指令的返回值才有效
	//如果是多个指令,每个指令要单独放一行

until命令
	和while完全相反,返回值不为0的时候工作,为0时循环结束
	//也支持多命令

------------------------------------------------------------------------------------
循环控制
	break
		break num:可以指定跳出的循环层数
	continue
		continue num:可以指定提前终止的层数

处理循环的输出
	在最后的done加个重定向可以改变输出位置
	eg;
		for i in /home/chenweida/*
		do
			if [ -d "$i" ]
			then 
				
			fi
		done > output.txt
	//当然这样的办法也适用于管道

实例:
	读取文件
	存在一个csv: userid,username 两个字段
	while IFS=',' read -r userid name
	do
		echo "adding $userid"
		useradd -c "$name" -m $userid
	done < input.csv
	//输入重定向,用于读取文件

/////////////////////////////////////////////////////////////////////////////////

处理用户输入

命令行参数
	$0 程序名//如果用另一个命令来运行,会和脚本名混在一起,可能还有路径
	$1 ~ $9 对应的九个参数
	//说明:将文本字符串作为参数传递时,引号是数据的一部分,表明数据的起止位置
	//超过9的时候取第十个参数使用花括号 : ${10}

	basename :返回不包含路径的脚本名

	$# 参数统计//表示参数的个数
	//花括号内不能使用 $ ,作为替换 ! 
	eg:
		X ${$#}//本意想表达最后一个参数,但是这样不行
		正确做法是: ${!#}
	$* 把所有的参数当作一个单词保存,把所有的参数当做一个整体,如果$*被" "包住的话,会被理解成一个参数
	$@ 把所有的参数当做多个独立的单词.

移动变量
	shift:将参数往左移动一位,$3变成$2,$2变成$1,$0不会变,$1被删除//当然被删除的参数是不能恢复的
	shift num:可以设置左移的位数

查找选项:
	处理简单选项:
	eg:
		while [ -n $1 ]
		do 
			case "$1" in
				-a) ;;
				-b) ;;
				-c) ;;
				*)  ;;
			esac
			shift
		done

	分离参数和选项:
		eg:
		while [ -n "$1" ]
		do 
			case "$1" in
				-a) ;;
				-b) ;;
				--) shift
					break ;;
				*)  ;;
			esac
			shift
		done
		//这样在使用的脚本的时候 选项和参数之间使用 -- 分隔

	处理带值的选项
		while [ -n "$1" ]
		do 
			case "$1" in
				-a) ;;
				-b) param=$2//主要是对$2的操作,$1是选项,那么$2就是选项的值
					shift//记得移除掉一次
					;;
				-c) ;;
				--) shift
					break;;
				*)  ;;
			esac
			shift
		done

getopt命令
	格式:
		getopt optstring parameters
		optstring 定义了有效的选项字母,在每个需要的参数值的选项字母后加一个 : 
	eg:
		getopt ab:cd -a -b test1 -cd test2 test3
		规定了 选项有abcd,而b带有选项的参数,-cd 后面是命令行参数,而不是选项的参数,这样就不用--去区分了
	在脚本中使用
		set -- $(getopt -q ab:cd "$@")
		-q:取消错误的选项的报错
		$@: 脚本的参数
	//格式化脚本的参数规范
	//但是不能处理带空格和引号的参数

getopts命令
	getopts optstring variable
	eg:
		while getopts :ab:c opt //最前面的 : 代表屏蔽错误信息 //opt代表脚本参数的命名,方便接下来调用
		do
			case "$opt" in
				a) ;;//每个选项前不用加 -
				b) echo $OPTARG //可以找到选项的值;; 
				c) ;;//不需要 -- 以区分选项和参数
				*) ;;
			esac
		done
		
		调用脚本:
			./test.sh -ab test -c //完美的调用方式
			./test.sh -abtest1 //选项和选项的值可以不用空格隔开.mysql的登录终于明白原因了
			//未找到选项会以问号发给代码
			//没有手动shift,所以调用参数之前得shift一下

		后续处理参数

		shift $[ $OPTIND - 1 ]
		//简单解释一下,$OPTIND初始是0,每处理一次参数就加1,第一个参数是$0 ,就是文件名本身,之后处理完选项后就是参数了,减1是无视$0的意思

-----------------------------------------------------------------------------------------------
将选项标准化
	-a all object
	-c count
	-d 指定一个目录
	-e 扩展一个对象
	-f 指定读入数据的文件
	-h 显示命令的帮助信息
	-i 忽略文本大小写
	-l 产生输出的长格式的文本
	-n 使用非交互模式
	-o 将所有输出重定向到指定的输出文件
	-q 以安静模式运行
	-r 递归处理文件和目录
	-s 和-q一样
	-v 生成详细输出
	-x 排除某个对象
	-y 对所有问题回答yes

获得用户输入
	read option var//从标准输入或者文件描述符中接受输入到var
		-p "************" :指定提示符
	//可以读取数据分配给多个变量

	read var1 var2 //如果变量数量不够,就把剩余的数据分配给最后一个变量

	如果不指定变量,就会将它收到的任何数据放进到环境变量 REPLY 里
	//只有这么一个储存...

		-t time //超时处理,设定一个计时器(秒) ,当计时器过期的时候,read返回一个非0退出状态码
		//通常配合结构化语句使用
		eg:
			if read -t 5 -p "please enter your name:" name
			then
				
			else
				
			fi

		-n num //指定输入的字符数,当到达预设的字符数时,就自动退出,将输入的数据赋值给变量

		-s 隐藏方式读取
		
	从文件中读取
		每次调用read命令,都读取一行文本.当文本没有文件的时候,read命令会退出并返回一个非零状态码
		eg:
			count=1
			cat test | while read line
			do
				echo $line
				count=$[ $count + 1 ]
			done
//////////////////////////////////////////////////////////////////////////////////////////////////////////
呈现数据
	
	标准文件描述符
	每个进程一次最多可以有九个文件描述符,0,1,2保留
	0 stdin
	1 stdout
	2 stderr

	shell对错误信息和普通输出是分开的
	默认情况下stderr和stdout都是指向同样的地方

重定向错误
	2>
	eg:
		ls -al badfile 2> test
		cat test4

重定向错误和数据
	ls -al test test3 badtest 2> test6 1>test7
	//这种是分开重定向

	ls -al test test3 &> test
	//这种是一起重定向
	//而且优先错误信息将重定向

--------------------------------------------------------------------------------------------------
在脚本里重定向输出
	临时重定向
		将输出信息重定向到stderr文件描述符
		eg:
			echo "this is an error" >&2
--------------------------------------
|我的理解:                           |
|输出  >  文件描述符				 |
|1> test 讲标准输出定向到test文件	 |
|&> test 将两种输出定向到test文件  	 |
|------------------------------------|
| >&2 将该(标准)输出定义为错误输出   |
|------------------------------------|

永久重定向
	exec:
	eg:
		exec 1>testout
	//exec命令会启动一个新shell并将stdout文件描述符重定向到文件.脚本中发送给stdout的所有输出会被重定向到文件
	//缺点也很明显,切不回来了
	//全局
---------------------------------------------------------------------------------------------------
在脚本里重定向输入
	exec 0< testfile
	//将文件定向到标准输入
	//全局
	eg:
		exec 0< testfile
		while read line
		do
			echo $line
		done
	//stdin重定向到文件后,当read命令试图从stdin读入数据的时候,它会到文件去读取

---------------------------------------------------------------------------------------------------
创建自己的重定向
	创建输出文件描述符
	3-8
	eg：
		exec 3>testout //将 3 输出到testout
		echo 1
		echo 2 >&3 //将该输出定义为文件描述符3 // 1>&3 本意应该是这个样子，例子中省略了 1
		echo 3
	结果：
		1
		3
	// 2 被输出到testout文件里了

	重定向文件描述符
	eg:
		exec 3>&1
		exec 1>testout

		echo 1
		echo 2

		exec 1>&3
		echo 3
	结果:
		3
		//1和2被输出到testout里了
--------------------------------------------------------------------
|我的理解是其他默认的文件符都是输出到标准输出的,那么当把 1>test 时,|
|要切换回来的办法就是把 1>&3(或者其他数字),						   |
|这样就不会输出到test文件里了,									   |
|做到了类似恢复重定向的效果										   |
|那应该是默认所有文件描述符都是输出到stdout						   |
--------------------------------------------------------------------

	创建输入文件描述符
	eg:
		exec 6<&0 //将文件描述符6定义为0
		exec 0< testfile //0从testfile读取文件
		while read line 
		do
			echo $line
		done

		exec 0<&6 //将0定义为6 ,相当于取消输入重定向.           //默认所有文件描述符都是从 stdin 获得输入的//
		read -p "enter answer" answer
		case $answer in
		y | Y) 
			;;
		n | N)
			;;
		esac
//或者换个说法,文件描述符保存了原来的 0 ,然后0重定向到一个文件,后面再恢复 0 的定向位置

	创建读写文件描述符
	exec 3<> testfile
	read line <&3 (其实应该是 0<&3 )
	echo $line
	echo "this is a test" >&3
	//testfile文件内容
	this is first
	this is second cwdcwd
	this is third
	//运行后文件的内容
	this is first
	this is a test
	 cwdcwd
	this is third
	//这涉及到内部指针,读取的时候指针读取到一个位置,而写入是覆盖的,从上次的指针开始继续覆盖写入

	关闭文件描述符
	只需将文件描述符定义到 - 就行
	例如: exec 3>&-
	//如果尝试使用已关闭的文件描述符会报错
	exec 3> testfile
	echo "test" >&3
	exec 3>&-
	echo "this won't work" >&3
	//结果报错

	//要注意的是,关闭文件描述符后再打开同一个输出文件,shell会用一个新的文件来替换,也就是会覆盖

	列出打开的文件描述符
	lsof:列出整个linux系统打开的文件描述符
	-p 指定进程id
	-d 指定要显示的文件描述符
	-a 用来对其他两个选项的结果进行and运算
	eg:
		lsof -a -p $$ -d 0,1,2
		//$$ 是当前文件进程id
	
	阻止命令输出
	/dev/null //这个文件不保存任何数据
	eg:
		ls -al / > /dev/null
	
	也可以用来输入
	eg:
		cat /dev/null > testfile
	//快速清空文件而不是删除再创建
-----------------------------------------------------------------------------------------------------
	创建临时文件
	mktemp
	格式:mktemp testing.XXXXXX //testing那段是随意的,后面加6个X就行了
	//该命令会返回创建的临时文件名称

	-t 强制mktemp在系统的临时目录下创建文件.用这个特性的时候,会返回全路径,而不只是文件名

	创建临时目录
	-d 创建临时目录

------------------------------------------------------------------------------------------------------

记录消息
	将输出同事发送到显示器和日志文件
	tee t型管道
	格式: tee filename
	eg:
		date | tee testfile
		//date的时间发送到管道,再进行分流,一端向屏幕,一端向文件
		//要配和 | 一起使用
		//默认是覆盖文件,使用 -a 实现追加
	
	实例
	outfile='members.sql'
	IFS=','
	while read a b c d e f
	do
		cat >> $outfile << EOF
		INSERT INTO members(a,b,c,d,e,f) VALUES //这个输入的办法会保留换行,所以他的结尾才加了分号 ';'
		('$a','$b','$c','$d','$e','$f');
		EOF
	done < ${1}

////////////////////////////////////////////////////////////////////////////////////////////////////////

控制脚本

处理信号
	1	SIGHUP	挂起
	2	SIGINT	终止
	3	SIGQUIT	停止
	9	SIGKILL	无条件终止
	15	SIGTERM	尽可能终止
	17	SIGSTOP	无条件停止,但不是终止
	18	SIGTSTP	停止或暂停,但不终止
	19	SIGCONT 继续运行停止的进程

	生成信号		
	1.中断进程
		ctrl + c
		发送sigint信号,也就是 2

	2.暂停进程
		ctrl + z
		发送sigtstp
	
捕获信号
	格式: trap commands signals
	//允许脚本监看并从shell中拦截信号,如果脚本收到trap命令列出的信号,该信号不再由shell处理,而是交由本地处理
	eg:
		trap "echo 'sorry,I have traped ctrl-c'" SIGINT
		count=1
		while [ $count -le 10 ]
		do
			echo "$count"
			sleep 1
			count=$[$count + 1]
		done
	//这个脚本会阻止ctrl+c来终止程序

捕获脚本退出
	除了捕获信号,还可以捕获退出
	eg:
		trap "echo 'goodbye'" EXIT
		count=1
		while [ $count -le 10 ]
		do
			echo $count
			sleep
			count=$[$count+1]
		done
	//这个脚本在结束的时候打印goodbye

修改或移除捕获
	可以重新声明一次trap,可以做到修改的效果,不过信号若在修改之前收到,那还是按之前的trap进行处理
	移除trap:
		trap -- 已声明的信号
		eg:	trap -- SIGINT
		//好像单破折号也是可以的
--------------------------------------------------------------------------------------------------------------
后台运行脚本
	在脚本后面加个   &
	//它会将命令和bash分离,将命令作为系统中的一个独立的后台进程运行
	//输入后会显示 [工作号] PID
	//当后台进程运行的时候,他仍然使用终端显示器显示stdout和stderr
	//最好重定向,否则后台输出可能会和输入混了
	//在终端使用后台进程要小心,因为后台进程是和终端会话绑定的,终端结束后台也会跟着结束

非控制台运行脚本
	nohup命令运行另外的一个命令来阻断发送给进程的sighup信号(挂起),在终端退出的时候阻止进程退出
	nohup ./test.sh &
	//和普通进程一样,但如果收到终端发来的sighup信号会取消终端和进程的关联,所以输出也不再是stdout和stderr,而是重定向到一个nohup.out的文件里.
	//nohup.out和脚本在同一目录下
--------------------------------------------------------------------------------------------------------------
作业控制
	查看作业
	jobs
		-l 进程的pid和作业号
		-n 只列出上次shell发出的通知后改变状态的作业
		-p pid
		-r 只列出运行中的作业
		-s 只列出已停止的作业

	重启停止的作业
		bg 作业号
		//使停止的进程以后台运行的方式运行
		//默认重启默认作业

		fg 作业号
		//前台运行

---------------------------------------------------------------------------------------------------------------

调整谦让度
	优先度 : -20 ~ 19 //越小优先级越高(默认优先级是0)
	nice 命令
		-n 设置优先级
		//nice会阻止普通用户提高系统的优先级,但不会阻止作业的运行,但是优先级提高无效

	renice 命令
	//更改已经运行的命令的优先级
		-n 设置优先级 
		-p 指定pid
		//只能对自己的进程执行
		//只能通过renice降低优先级
		//root无敌

---------------------------------------------------------------------------------------------------------------
定时运行作业
	
计划执行作业
	at 命令
	格式: at -f 脚本名 time
	time参数:
		eg:
			10:12
			10:12 PM
			now , noon ,midnight ,teatime
			MMDDYY , MM/DD/YY , DD.MM.YY
			Jul 4 , Dec 25
			//还有时间增量,但我看不懂
	//当作业在系统上运行的时候,显示器不会关联到该作业,而是用电子邮件作为输出
	//但是需要sendemail,我又没有,也不想装
	-M 屏蔽作业产生的输出信息
	
	atq 命令
	列出等待的作业

	atrm 命令
	删除作业

安排需要定期执行的脚本
	cron 时间表
	格式:
		min hour dayofmonth month dayofweek command
		
	eg:
		15 10 * * * command
		//表示每个月的每天10:15执行该命令

		15 10 * * 1 command
		//表示每个月的每周一10:15执行该命令
		//其中(0-6)来指定dayofweek
		//或者(mon,tue,wed,thu,fri,sat,sun)
		
		00 12 1 * * command
		//表示每个月的第一天的12:00执行该命令
		//(1-31)来指定dayofmonth
	//有趣的例子,关于每月最后一天执行
	00 12 * * * if [ `date +%d -d tomorrow` = 01 ];then;command

	//命令列表必须指要运行的命令或脚本的全路路径
	cron 会用提交作业的用户来运行脚本,所以你必须有足够的权限
	
	构建crontab
	命令:crontab 
		-l	查看当前用户的crontab

	浏览cron目录
	ls /etc/cron.*ly
	//分别对应四个情况运行,只要把对应的脚本丢进去就行
	
